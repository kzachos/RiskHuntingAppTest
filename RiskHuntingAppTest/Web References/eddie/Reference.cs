// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.17020
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

namespace RiskHuntingAppTest.eddie {
    
    
    /// <remarks/>
    /// <remarks>
///A web service that performs natural language discovery based on the Expansion and Disambiguation Discovery Engine (EDDiE) Algorithm. Query matching is in 2 steps: (i) XQuery text-searching functions to discover an initial set of case descriptions that satisfy global search constraints (CoarseGrainedMatching); (ii) traditional vector-space model IR, enhanced with WordNet, to further refine and assess the quality of the candidate case set (FineGrainedMatching).
///</remarks>
    [System.Web.Services.WebServiceBinding(Name="EDDiE_x0020_Web_x0020_ServiceSoap", Namespace="http://tempuri.org/")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class EDDiEWebService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback RetrieveTermsOperationCompleted;
        
        private System.Threading.SendOrPostCallback NLTranslatorOperationCompleted;
        
        private System.Threading.SendOrPostCallback ValidateRequestXmlOperationCompleted;
        
        private System.Threading.SendOrPostCallback ValidateResponseXmlOperationCompleted;
        
        private System.Threading.SendOrPostCallback RetrieveRequestXmlSchemaOperationCompleted;
        
        private System.Threading.SendOrPostCallback RetrieveResponseXmlSchemaOperationCompleted;
        
        private System.Threading.SendOrPostCallback RetrieveAllSourcesOperationCompleted;
        
        private System.Threading.SendOrPostCallback RetrieveAllSourcesDomainOperationCompleted;
        
        private System.Threading.SendOrPostCallback PerformEddieDomainOperationCompleted;
        
        private System.Threading.SendOrPostCallback PerformEddieOperationCompleted;
        
        private System.Threading.SendOrPostCallback PerformEddieSampleOperationCompleted;
        
        private System.Threading.SendOrPostCallback PerformEddieDomainSampleOperationCompleted;
        
        public EDDiEWebService() {
            this.Url = "http://achernar.soi.city.ac.uk/ESD/WebServices/EDDiE_WS/EddieService.asmx";
        }
        
        public EDDiEWebService(string url) {
            this.Url = url;
        }
        
        public event RetrieveTermsCompletedEventHandler RetrieveTermsCompleted;
        
        public event NLTranslatorCompletedEventHandler NLTranslatorCompleted;
        
        public event ValidateRequestXmlCompletedEventHandler ValidateRequestXmlCompleted;
        
        public event ValidateResponseXmlCompletedEventHandler ValidateResponseXmlCompleted;
        
        public event RetrieveRequestXmlSchemaCompletedEventHandler RetrieveRequestXmlSchemaCompleted;
        
        public event RetrieveResponseXmlSchemaCompletedEventHandler RetrieveResponseXmlSchemaCompleted;
        
        public event RetrieveAllSourcesCompletedEventHandler RetrieveAllSourcesCompleted;
        
        public event RetrieveAllSourcesDomainCompletedEventHandler RetrieveAllSourcesDomainCompleted;
        
        public event PerformEddieDomainCompletedEventHandler PerformEddieDomainCompleted;
        
        public event PerformEddieCompletedEventHandler PerformEddieCompleted;
        
        public event PerformEddieSampleCompletedEventHandler PerformEddieSampleCompleted;
        
        public event PerformEddieDomainSampleCompletedEventHandler PerformEddieDomainSampleCompleted;
        
        /// <remarks>
///<b>Input</b>: none<br><b>Output</b>:  The list of terms currently in the database. 
///</remarks>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/RetrieveTerms", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        public string RetrieveTerms() {
            object[] results = this.Invoke("RetrieveTerms", new object[0]);
            return ((string)(results[0]));
        }
        
        public System.IAsyncResult BeginRetrieveTerms(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("RetrieveTerms", new object[0], callback, asyncState);
        }
        
        public string EndRetrieveTerms(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        public void RetrieveTermsAsync() {
            this.RetrieveTermsAsync(null);
        }
        
        public void RetrieveTermsAsync(object userState) {
            if ((this.RetrieveTermsOperationCompleted == null)) {
                this.RetrieveTermsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRetrieveTermsCompleted);
            }
            this.InvokeAsync("RetrieveTerms", new object[0], this.RetrieveTermsOperationCompleted, userState);
        }
        
        private void OnRetrieveTermsCompleted(object arg) {
            if ((this.RetrieveTermsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RetrieveTermsCompleted(this, new RetrieveTermsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks>
///<b>Input</b>:  The content of a natural language text to translate<br><b>Output</b>:  The content of the translated text. 
///</remarks>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/NLTranslator", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        public string NLTranslator(string text, string fromLanguage, string toLanguage) {
            object[] results = this.Invoke("NLTranslator", new object[] {
                        text,
                        fromLanguage,
                        toLanguage});
            return ((string)(results[0]));
        }
        
        public System.IAsyncResult BeginNLTranslator(string text, string fromLanguage, string toLanguage, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("NLTranslator", new object[] {
                        text,
                        fromLanguage,
                        toLanguage}, callback, asyncState);
        }
        
        public string EndNLTranslator(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        public void NLTranslatorAsync(string text, string fromLanguage, string toLanguage) {
            this.NLTranslatorAsync(text, fromLanguage, toLanguage, null);
        }
        
        public void NLTranslatorAsync(string text, string fromLanguage, string toLanguage, object userState) {
            if ((this.NLTranslatorOperationCompleted == null)) {
                this.NLTranslatorOperationCompleted = new System.Threading.SendOrPostCallback(this.OnNLTranslatorCompleted);
            }
            this.InvokeAsync("NLTranslator", new object[] {
                        text,
                        fromLanguage,
                        toLanguage}, this.NLTranslatorOperationCompleted, userState);
        }
        
        private void OnNLTranslatorCompleted(object arg) {
            if ((this.NLTranslatorCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.NLTranslatorCompleted(this, new NLTranslatorCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks>
///Validate a XML Document against the Request XML Schema by taking the actual content of the XML Document
///</remarks>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ValidateRequestXml", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        public string ValidateRequestXml(string xml) {
            object[] results = this.Invoke("ValidateRequestXml", new object[] {
                        xml});
            return ((string)(results[0]));
        }
        
        public System.IAsyncResult BeginValidateRequestXml(string xml, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ValidateRequestXml", new object[] {
                        xml}, callback, asyncState);
        }
        
        public string EndValidateRequestXml(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        public void ValidateRequestXmlAsync(string xml) {
            this.ValidateRequestXmlAsync(xml, null);
        }
        
        public void ValidateRequestXmlAsync(string xml, object userState) {
            if ((this.ValidateRequestXmlOperationCompleted == null)) {
                this.ValidateRequestXmlOperationCompleted = new System.Threading.SendOrPostCallback(this.OnValidateRequestXmlCompleted);
            }
            this.InvokeAsync("ValidateRequestXml", new object[] {
                        xml}, this.ValidateRequestXmlOperationCompleted, userState);
        }
        
        private void OnValidateRequestXmlCompleted(object arg) {
            if ((this.ValidateRequestXmlCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ValidateRequestXmlCompleted(this, new ValidateRequestXmlCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks>
///Validate a XML Document against the Response XML Schema by taking the actual content of the XML Document
///</remarks>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ValidateResponseXml", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        public string ValidateResponseXml(string xml) {
            object[] results = this.Invoke("ValidateResponseXml", new object[] {
                        xml});
            return ((string)(results[0]));
        }
        
        public System.IAsyncResult BeginValidateResponseXml(string xml, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ValidateResponseXml", new object[] {
                        xml}, callback, asyncState);
        }
        
        public string EndValidateResponseXml(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        public void ValidateResponseXmlAsync(string xml) {
            this.ValidateResponseXmlAsync(xml, null);
        }
        
        public void ValidateResponseXmlAsync(string xml, object userState) {
            if ((this.ValidateResponseXmlOperationCompleted == null)) {
                this.ValidateResponseXmlOperationCompleted = new System.Threading.SendOrPostCallback(this.OnValidateResponseXmlCompleted);
            }
            this.InvokeAsync("ValidateResponseXml", new object[] {
                        xml}, this.ValidateResponseXmlOperationCompleted, userState);
        }
        
        private void OnValidateResponseXmlCompleted(object arg) {
            if ((this.ValidateResponseXmlCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ValidateResponseXmlCompleted(this, new ValidateResponseXmlCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks>
///Retrieve the Request XML Schema currently used for constructing EddieRequest Xml documents
///</remarks>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/RetrieveRequestXmlSchema", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        public string RetrieveRequestXmlSchema() {
            object[] results = this.Invoke("RetrieveRequestXmlSchema", new object[0]);
            return ((string)(results[0]));
        }
        
        public System.IAsyncResult BeginRetrieveRequestXmlSchema(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("RetrieveRequestXmlSchema", new object[0], callback, asyncState);
        }
        
        public string EndRetrieveRequestXmlSchema(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        public void RetrieveRequestXmlSchemaAsync() {
            this.RetrieveRequestXmlSchemaAsync(null);
        }
        
        public void RetrieveRequestXmlSchemaAsync(object userState) {
            if ((this.RetrieveRequestXmlSchemaOperationCompleted == null)) {
                this.RetrieveRequestXmlSchemaOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRetrieveRequestXmlSchemaCompleted);
            }
            this.InvokeAsync("RetrieveRequestXmlSchema", new object[0], this.RetrieveRequestXmlSchemaOperationCompleted, userState);
        }
        
        private void OnRetrieveRequestXmlSchemaCompleted(object arg) {
            if ((this.RetrieveRequestXmlSchemaCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RetrieveRequestXmlSchemaCompleted(this, new RetrieveRequestXmlSchemaCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks>
///Retrieve the Response XML Schema currently used for constructing EddieResponse Xml documents
///</remarks>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/RetrieveResponseXmlSchema", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        public string RetrieveResponseXmlSchema() {
            object[] results = this.Invoke("RetrieveResponseXmlSchema", new object[0]);
            return ((string)(results[0]));
        }
        
        public System.IAsyncResult BeginRetrieveResponseXmlSchema(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("RetrieveResponseXmlSchema", new object[0], callback, asyncState);
        }
        
        public string EndRetrieveResponseXmlSchema(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        public void RetrieveResponseXmlSchemaAsync() {
            this.RetrieveResponseXmlSchemaAsync(null);
        }
        
        public void RetrieveResponseXmlSchemaAsync(object userState) {
            if ((this.RetrieveResponseXmlSchemaOperationCompleted == null)) {
                this.RetrieveResponseXmlSchemaOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRetrieveResponseXmlSchemaCompleted);
            }
            this.InvokeAsync("RetrieveResponseXmlSchema", new object[0], this.RetrieveResponseXmlSchemaOperationCompleted, userState);
        }
        
        private void OnRetrieveResponseXmlSchemaCompleted(object arg) {
            if ((this.RetrieveResponseXmlSchemaCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RetrieveResponseXmlSchemaCompleted(this, new RetrieveResponseXmlSchemaCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks>
///<b>Output</b>:  Retrieve all sources that exists in the database. 
///</remarks>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/RetrieveAllSources", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        public string RetrieveAllSources() {
            object[] results = this.Invoke("RetrieveAllSources", new object[0]);
            return ((string)(results[0]));
        }
        
        public System.IAsyncResult BeginRetrieveAllSources(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("RetrieveAllSources", new object[0], callback, asyncState);
        }
        
        public string EndRetrieveAllSources(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        public void RetrieveAllSourcesAsync() {
            this.RetrieveAllSourcesAsync(null);
        }
        
        public void RetrieveAllSourcesAsync(object userState) {
            if ((this.RetrieveAllSourcesOperationCompleted == null)) {
                this.RetrieveAllSourcesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRetrieveAllSourcesCompleted);
            }
            this.InvokeAsync("RetrieveAllSources", new object[0], this.RetrieveAllSourcesOperationCompleted, userState);
        }
        
        private void OnRetrieveAllSourcesCompleted(object arg) {
            if ((this.RetrieveAllSourcesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RetrieveAllSourcesCompleted(this, new RetrieveAllSourcesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks>
///<b>Output</b>:  Retrieve all sources that exists in the database. 
///</remarks>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/RetrieveAllSourcesDomain", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        public string RetrieveAllSourcesDomain(string domain) {
            object[] results = this.Invoke("RetrieveAllSourcesDomain", new object[] {
                        domain});
            return ((string)(results[0]));
        }
        
        public System.IAsyncResult BeginRetrieveAllSourcesDomain(string domain, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("RetrieveAllSourcesDomain", new object[] {
                        domain}, callback, asyncState);
        }
        
        public string EndRetrieveAllSourcesDomain(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        public void RetrieveAllSourcesDomainAsync(string domain) {
            this.RetrieveAllSourcesDomainAsync(domain, null);
        }
        
        public void RetrieveAllSourcesDomainAsync(string domain, object userState) {
            if ((this.RetrieveAllSourcesDomainOperationCompleted == null)) {
                this.RetrieveAllSourcesDomainOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRetrieveAllSourcesDomainCompleted);
            }
            this.InvokeAsync("RetrieveAllSourcesDomain", new object[] {
                        domain}, this.RetrieveAllSourcesDomainOperationCompleted, userState);
        }
        
        private void OnRetrieveAllSourcesDomainCompleted(object arg) {
            if ((this.RetrieveAllSourcesDomainCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RetrieveAllSourcesDomainCompleted(this, new RetrieveAllSourcesDomainCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks>
///<b>Input</b>:  The content of a Request xml that is based on the Request XML schema (available using <i>RetrieveRequestXmlSchema()</i> method).<br><b>Output</b>:  The content of the resulting ordered Response XML that contains ONLY the basic information - based on the Response XML schema (available using <i>RetrieveResponseXmlSchema()</i> method).<br><b>Description</b>: A web service that performs natural languge discovery based on the Expansion and Disambiguation Discovery Engine (EDDiE) Algorithm. 
///</remarks>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/PerformEddieDomain", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        public string PerformEddieDomain(string eddieRequestXml, string domain) {
            object[] results = this.Invoke("PerformEddieDomain", new object[] {
                        eddieRequestXml,
                        domain});
            return ((string)(results[0]));
        }
        
        public System.IAsyncResult BeginPerformEddieDomain(string eddieRequestXml, string domain, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("PerformEddieDomain", new object[] {
                        eddieRequestXml,
                        domain}, callback, asyncState);
        }
        
        public string EndPerformEddieDomain(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        public void PerformEddieDomainAsync(string eddieRequestXml, string domain) {
            this.PerformEddieDomainAsync(eddieRequestXml, domain, null);
        }
        
        public void PerformEddieDomainAsync(string eddieRequestXml, string domain, object userState) {
            if ((this.PerformEddieDomainOperationCompleted == null)) {
                this.PerformEddieDomainOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPerformEddieDomainCompleted);
            }
            this.InvokeAsync("PerformEddieDomain", new object[] {
                        eddieRequestXml,
                        domain}, this.PerformEddieDomainOperationCompleted, userState);
        }
        
        private void OnPerformEddieDomainCompleted(object arg) {
            if ((this.PerformEddieDomainCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PerformEddieDomainCompleted(this, new PerformEddieDomainCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks>
///<b>Input</b>:  The content of a Request xml that is based on the Request XML schema (available using <i>RetrieveRequestXmlSchema()</i> method).<br><b>Output</b>:  The content of the resulting ordered Response XML that contains ONLY the basic information - based on the Response XML schema (available using <i>RetrieveResponseXmlSchema()</i> method).<br><b>Description</b>: A web service that performs natural languge discovery based on the Expansion and Disambiguation Discovery Engine (EDDiE) Algorithm. 
///</remarks>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/PerformEddie", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        public string PerformEddie(string eddieRequestXml) {
            object[] results = this.Invoke("PerformEddie", new object[] {
                        eddieRequestXml});
            return ((string)(results[0]));
        }
        
        public System.IAsyncResult BeginPerformEddie(string eddieRequestXml, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("PerformEddie", new object[] {
                        eddieRequestXml}, callback, asyncState);
        }
        
        public string EndPerformEddie(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        public void PerformEddieAsync(string eddieRequestXml) {
            this.PerformEddieAsync(eddieRequestXml, null);
        }
        
        public void PerformEddieAsync(string eddieRequestXml, object userState) {
            if ((this.PerformEddieOperationCompleted == null)) {
                this.PerformEddieOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPerformEddieCompleted);
            }
            this.InvokeAsync("PerformEddie", new object[] {
                        eddieRequestXml}, this.PerformEddieOperationCompleted, userState);
        }
        
        private void OnPerformEddieCompleted(object arg) {
            if ((this.PerformEddieCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PerformEddieCompleted(this, new PerformEddieCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks>
///<b>Output</b>:  The content of the resulting ordered Response XML that contains ONLY the basic information - based on the Response XML schema (available using <i>RetrieveResponseXmlSchema()</i> method).<br><b>Description</b>: A web service which performs natural language discovery based on the Expansion and Disambiguation Discovery Engine (EDDiE) Algorithm using a sample request. 
///</remarks>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/PerformEddieSample", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        public string PerformEddieSample() {
            object[] results = this.Invoke("PerformEddieSample", new object[0]);
            return ((string)(results[0]));
        }
        
        public System.IAsyncResult BeginPerformEddieSample(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("PerformEddieSample", new object[0], callback, asyncState);
        }
        
        public string EndPerformEddieSample(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        public void PerformEddieSampleAsync() {
            this.PerformEddieSampleAsync(null);
        }
        
        public void PerformEddieSampleAsync(object userState) {
            if ((this.PerformEddieSampleOperationCompleted == null)) {
                this.PerformEddieSampleOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPerformEddieSampleCompleted);
            }
            this.InvokeAsync("PerformEddieSample", new object[0], this.PerformEddieSampleOperationCompleted, userState);
        }
        
        private void OnPerformEddieSampleCompleted(object arg) {
            if ((this.PerformEddieSampleCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PerformEddieSampleCompleted(this, new PerformEddieSampleCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks>
///<b>Output</b>:  The content of the resulting ordered Response XML that contains ONLY the basic information - based on the Response XML schema (available using <i>RetrieveResponseXmlSchema()</i> method).<br><b>Description</b>: A web service which performs natural language discovery based on the Expansion and Disambiguation Discovery Engine (EDDiE) Algorithm using a sample request. 
///</remarks>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/PerformEddieDomainSample", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        public string PerformEddieDomainSample(string domain) {
            object[] results = this.Invoke("PerformEddieDomainSample", new object[] {
                        domain});
            return ((string)(results[0]));
        }
        
        public System.IAsyncResult BeginPerformEddieDomainSample(string domain, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("PerformEddieDomainSample", new object[] {
                        domain}, callback, asyncState);
        }
        
        public string EndPerformEddieDomainSample(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        public void PerformEddieDomainSampleAsync(string domain) {
            this.PerformEddieDomainSampleAsync(domain, null);
        }
        
        public void PerformEddieDomainSampleAsync(string domain, object userState) {
            if ((this.PerformEddieDomainSampleOperationCompleted == null)) {
                this.PerformEddieDomainSampleOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPerformEddieDomainSampleCompleted);
            }
            this.InvokeAsync("PerformEddieDomainSample", new object[] {
                        domain}, this.PerformEddieDomainSampleOperationCompleted, userState);
        }
        
        private void OnPerformEddieDomainSampleCompleted(object arg) {
            if ((this.PerformEddieDomainSampleCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PerformEddieDomainSampleCompleted(this, new PerformEddieDomainSampleCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
    }
    
    public partial class RetrieveTermsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RetrieveTermsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    public delegate void RetrieveTermsCompletedEventHandler(object sender, RetrieveTermsCompletedEventArgs args);
    
    public partial class NLTranslatorCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal NLTranslatorCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    public delegate void NLTranslatorCompletedEventHandler(object sender, NLTranslatorCompletedEventArgs args);
    
    public partial class ValidateRequestXmlCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ValidateRequestXmlCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    public delegate void ValidateRequestXmlCompletedEventHandler(object sender, ValidateRequestXmlCompletedEventArgs args);
    
    public partial class ValidateResponseXmlCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ValidateResponseXmlCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    public delegate void ValidateResponseXmlCompletedEventHandler(object sender, ValidateResponseXmlCompletedEventArgs args);
    
    public partial class RetrieveRequestXmlSchemaCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RetrieveRequestXmlSchemaCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    public delegate void RetrieveRequestXmlSchemaCompletedEventHandler(object sender, RetrieveRequestXmlSchemaCompletedEventArgs args);
    
    public partial class RetrieveResponseXmlSchemaCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RetrieveResponseXmlSchemaCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    public delegate void RetrieveResponseXmlSchemaCompletedEventHandler(object sender, RetrieveResponseXmlSchemaCompletedEventArgs args);
    
    public partial class RetrieveAllSourcesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RetrieveAllSourcesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    public delegate void RetrieveAllSourcesCompletedEventHandler(object sender, RetrieveAllSourcesCompletedEventArgs args);
    
    public partial class RetrieveAllSourcesDomainCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RetrieveAllSourcesDomainCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    public delegate void RetrieveAllSourcesDomainCompletedEventHandler(object sender, RetrieveAllSourcesDomainCompletedEventArgs args);
    
    public partial class PerformEddieDomainCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PerformEddieDomainCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    public delegate void PerformEddieDomainCompletedEventHandler(object sender, PerformEddieDomainCompletedEventArgs args);
    
    public partial class PerformEddieCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PerformEddieCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    public delegate void PerformEddieCompletedEventHandler(object sender, PerformEddieCompletedEventArgs args);
    
    public partial class PerformEddieSampleCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PerformEddieSampleCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    public delegate void PerformEddieSampleCompletedEventHandler(object sender, PerformEddieSampleCompletedEventArgs args);
    
    public partial class PerformEddieDomainSampleCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PerformEddieDomainSampleCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    public delegate void PerformEddieDomainSampleCompletedEventHandler(object sender, PerformEddieDomainSampleCompletedEventArgs args);
}
