// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.17020
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

namespace RiskHuntingAppTest.antiqueService {
    
    
    /// <remarks/>
    [System.Web.Services.WebServiceBinding(Name="AntiqueServiceSoap", Namespace="http://tempuri.org/")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AntiqueService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback NLParserOperationCompleted;
        
        private System.Threading.SendOrPostCallback ValidateRequestXmlOperationCompleted;
        
        private System.Threading.SendOrPostCallback ValidateRequestXmlUriOperationCompleted;
        
        private System.Threading.SendOrPostCallback ValidateXmlOperationCompleted;
        
        private System.Threading.SendOrPostCallback ValidateXmlUriOperationCompleted;
        
        private System.Threading.SendOrPostCallback RetrieveRequestXmlSchemaOperationCompleted;
        
        private System.Threading.SendOrPostCallback RetrieveRequestXmlSampleOperationCompleted;
        
        private System.Threading.SendOrPostCallback RetrieveResponseXmlSchemaOperationCompleted;
        
        private System.Threading.SendOrPostCallback RetrieveResponseDetailedXmlSchemaOperationCompleted;
        
        private System.Threading.SendOrPostCallback CalculateSimilarityOperationCompleted;
        
        private System.Threading.SendOrPostCallback ConvertToNewDomainOperationCompleted;
        
        private System.Threading.SendOrPostCallback GenerateCreativityPromptsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GeneratePredicatesFromDocumentOperationCompleted;
        
        private System.Threading.SendOrPostCallback GeneratePredicatesOperationCompleted;
        
        private System.Threading.SendOrPostCallback RetrieveAllSourcesOperationCompleted;
        
        private System.Threading.SendOrPostCallback PerformAntiqueOperationCompleted;
        
        private System.Threading.SendOrPostCallback PerformAntiqueSampleOperationCompleted;
        
        public AntiqueService() {
            this.Url = "http://10.200.51.10/ESD/ClassLibraries/Antique/Antique.AntiqueService/AntiqueService.asmx";
        }
        
        public AntiqueService(string url) {
            this.Url = url;
        }
        
        public event NLParserCompletedEventHandler NLParserCompleted;
        
        public event ValidateRequestXmlCompletedEventHandler ValidateRequestXmlCompleted;
        
        public event ValidateRequestXmlUriCompletedEventHandler ValidateRequestXmlUriCompleted;
        
        public event ValidateXmlCompletedEventHandler ValidateXmlCompleted;
        
        public event ValidateXmlUriCompletedEventHandler ValidateXmlUriCompleted;
        
        public event RetrieveRequestXmlSchemaCompletedEventHandler RetrieveRequestXmlSchemaCompleted;
        
        public event RetrieveRequestXmlSampleCompletedEventHandler RetrieveRequestXmlSampleCompleted;
        
        public event RetrieveResponseXmlSchemaCompletedEventHandler RetrieveResponseXmlSchemaCompleted;
        
        public event RetrieveResponseDetailedXmlSchemaCompletedEventHandler RetrieveResponseDetailedXmlSchemaCompleted;
        
        public event CalculateSimilarityCompletedEventHandler CalculateSimilarityCompleted;
        
        public event ConvertToNewDomainCompletedEventHandler ConvertToNewDomainCompleted;
        
        public event GenerateCreativityPromptsCompletedEventHandler GenerateCreativityPromptsCompleted;
        
        public event GeneratePredicatesFromDocumentCompletedEventHandler GeneratePredicatesFromDocumentCompleted;
        
        public event GeneratePredicatesCompletedEventHandler GeneratePredicatesCompleted;
        
        public event RetrieveAllSourcesCompletedEventHandler RetrieveAllSourcesCompleted;
        
        public event PerformAntiqueCompletedEventHandler PerformAntiqueCompleted;
        
        public event PerformAntiqueSampleCompletedEventHandler PerformAntiqueSampleCompleted;
        
        /// <remarks>
///<b>Input</b>:  The content of a natural language text<br><b>Output</b>:  A JSON string containing two types of terms: objects (or noun phrases (NP)) and activities (or verb phrases (VP)). Terms are described as follows: <b>TermID</b>, <b>TermValue</b>, <b>Occurrence</b>, <b>Pos</b>, <b>Wnsn</b>, <b>RefTerm</b>, <b>ExpType</b>, <b>ExpWeight</b>, <b>MatchValue</b>, <b>RefTermValue</b>, <b>InGlossary</b><br><b>Description</b>: A simple natural language parser that processes a input text by (1) splitting into sentences and word tokens, (2) identifying complex nominals based on term definitions in WordNet, (3) identifying and removing all terms defined in a list of stop words (e.g. prepositions and pronouns), (4) tagging each word with their corresponding part-of-speech (e.g. singular common noun, comparative adjective, etc.) and classified accordingly using an improved version of the Brill Tagger.  
///</remarks>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/NLParser", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        public string NLParser(string toCreate) {
            object[] results = this.Invoke("NLParser", new object[] {
                        toCreate});
            return ((string)(results[0]));
        }
        
        public System.IAsyncResult BeginNLParser(string toCreate, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("NLParser", new object[] {
                        toCreate}, callback, asyncState);
        }
        
        public string EndNLParser(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        public void NLParserAsync(string toCreate) {
            this.NLParserAsync(toCreate, null);
        }
        
        public void NLParserAsync(string toCreate, object userState) {
            if ((this.NLParserOperationCompleted == null)) {
                this.NLParserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnNLParserCompleted);
            }
            this.InvokeAsync("NLParser", new object[] {
                        toCreate}, this.NLParserOperationCompleted, userState);
        }
        
        private void OnNLParserCompleted(object arg) {
            if ((this.NLParserCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.NLParserCompleted(this, new NLParserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks>
///Validate a XML Document against the Request XML Schema by taking the actual content of the XML Document
///</remarks>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ValidateRequestXml", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        public string ValidateRequestXml(string xml) {
            object[] results = this.Invoke("ValidateRequestXml", new object[] {
                        xml});
            return ((string)(results[0]));
        }
        
        public System.IAsyncResult BeginValidateRequestXml(string xml, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ValidateRequestXml", new object[] {
                        xml}, callback, asyncState);
        }
        
        public string EndValidateRequestXml(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        public void ValidateRequestXmlAsync(string xml) {
            this.ValidateRequestXmlAsync(xml, null);
        }
        
        public void ValidateRequestXmlAsync(string xml, object userState) {
            if ((this.ValidateRequestXmlOperationCompleted == null)) {
                this.ValidateRequestXmlOperationCompleted = new System.Threading.SendOrPostCallback(this.OnValidateRequestXmlCompleted);
            }
            this.InvokeAsync("ValidateRequestXml", new object[] {
                        xml}, this.ValidateRequestXmlOperationCompleted, userState);
        }
        
        private void OnValidateRequestXmlCompleted(object arg) {
            if ((this.ValidateRequestXmlCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ValidateRequestXmlCompleted(this, new ValidateRequestXmlCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks>
///Validate a XML Document against the Request XML Schema by taking the URI of the XML Document
///</remarks>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ValidateRequestXmlUri", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        public string ValidateRequestXmlUri(string xmlUri) {
            object[] results = this.Invoke("ValidateRequestXmlUri", new object[] {
                        xmlUri});
            return ((string)(results[0]));
        }
        
        public System.IAsyncResult BeginValidateRequestXmlUri(string xmlUri, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ValidateRequestXmlUri", new object[] {
                        xmlUri}, callback, asyncState);
        }
        
        public string EndValidateRequestXmlUri(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        public void ValidateRequestXmlUriAsync(string xmlUri) {
            this.ValidateRequestXmlUriAsync(xmlUri, null);
        }
        
        public void ValidateRequestXmlUriAsync(string xmlUri, object userState) {
            if ((this.ValidateRequestXmlUriOperationCompleted == null)) {
                this.ValidateRequestXmlUriOperationCompleted = new System.Threading.SendOrPostCallback(this.OnValidateRequestXmlUriCompleted);
            }
            this.InvokeAsync("ValidateRequestXmlUri", new object[] {
                        xmlUri}, this.ValidateRequestXmlUriOperationCompleted, userState);
        }
        
        private void OnValidateRequestXmlUriCompleted(object arg) {
            if ((this.ValidateRequestXmlUriCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ValidateRequestXmlUriCompleted(this, new ValidateRequestXmlUriCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks>
///Validate a XML Document against a XML Schema by taking the actual content of the XML Document
///</remarks>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ValidateXml", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        public string ValidateXml(string xml, string schemaNamespace, string schemaUri) {
            object[] results = this.Invoke("ValidateXml", new object[] {
                        xml,
                        schemaNamespace,
                        schemaUri});
            return ((string)(results[0]));
        }
        
        public System.IAsyncResult BeginValidateXml(string xml, string schemaNamespace, string schemaUri, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ValidateXml", new object[] {
                        xml,
                        schemaNamespace,
                        schemaUri}, callback, asyncState);
        }
        
        public string EndValidateXml(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        public void ValidateXmlAsync(string xml, string schemaNamespace, string schemaUri) {
            this.ValidateXmlAsync(xml, schemaNamespace, schemaUri, null);
        }
        
        public void ValidateXmlAsync(string xml, string schemaNamespace, string schemaUri, object userState) {
            if ((this.ValidateXmlOperationCompleted == null)) {
                this.ValidateXmlOperationCompleted = new System.Threading.SendOrPostCallback(this.OnValidateXmlCompleted);
            }
            this.InvokeAsync("ValidateXml", new object[] {
                        xml,
                        schemaNamespace,
                        schemaUri}, this.ValidateXmlOperationCompleted, userState);
        }
        
        private void OnValidateXmlCompleted(object arg) {
            if ((this.ValidateXmlCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ValidateXmlCompleted(this, new ValidateXmlCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks>
///Validate a XML Document against a XML Schema by taking the URI of the XML Document
///</remarks>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ValidateXmlUri", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        public string ValidateXmlUri(string xmlUri, string schemaNamespace, string schemaUri) {
            object[] results = this.Invoke("ValidateXmlUri", new object[] {
                        xmlUri,
                        schemaNamespace,
                        schemaUri});
            return ((string)(results[0]));
        }
        
        public System.IAsyncResult BeginValidateXmlUri(string xmlUri, string schemaNamespace, string schemaUri, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ValidateXmlUri", new object[] {
                        xmlUri,
                        schemaNamespace,
                        schemaUri}, callback, asyncState);
        }
        
        public string EndValidateXmlUri(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        public void ValidateXmlUriAsync(string xmlUri, string schemaNamespace, string schemaUri) {
            this.ValidateXmlUriAsync(xmlUri, schemaNamespace, schemaUri, null);
        }
        
        public void ValidateXmlUriAsync(string xmlUri, string schemaNamespace, string schemaUri, object userState) {
            if ((this.ValidateXmlUriOperationCompleted == null)) {
                this.ValidateXmlUriOperationCompleted = new System.Threading.SendOrPostCallback(this.OnValidateXmlUriCompleted);
            }
            this.InvokeAsync("ValidateXmlUri", new object[] {
                        xmlUri,
                        schemaNamespace,
                        schemaUri}, this.ValidateXmlUriOperationCompleted, userState);
        }
        
        private void OnValidateXmlUriCompleted(object arg) {
            if ((this.ValidateXmlUriCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ValidateXmlUriCompleted(this, new ValidateXmlUriCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks>
///Retrieve the Request XML Schema currently used for constructing Request Xml documents
///</remarks>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/RetrieveRequestXmlSchema", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        public string RetrieveRequestXmlSchema() {
            object[] results = this.Invoke("RetrieveRequestXmlSchema", new object[0]);
            return ((string)(results[0]));
        }
        
        public System.IAsyncResult BeginRetrieveRequestXmlSchema(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("RetrieveRequestXmlSchema", new object[0], callback, asyncState);
        }
        
        public string EndRetrieveRequestXmlSchema(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        public void RetrieveRequestXmlSchemaAsync() {
            this.RetrieveRequestXmlSchemaAsync(null);
        }
        
        public void RetrieveRequestXmlSchemaAsync(object userState) {
            if ((this.RetrieveRequestXmlSchemaOperationCompleted == null)) {
                this.RetrieveRequestXmlSchemaOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRetrieveRequestXmlSchemaCompleted);
            }
            this.InvokeAsync("RetrieveRequestXmlSchema", new object[0], this.RetrieveRequestXmlSchemaOperationCompleted, userState);
        }
        
        private void OnRetrieveRequestXmlSchemaCompleted(object arg) {
            if ((this.RetrieveRequestXmlSchemaCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RetrieveRequestXmlSchemaCompleted(this, new RetrieveRequestXmlSchemaCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks>
///Retrieve a sample of a Request XML corresponding to the Request XML Schema currently used
///</remarks>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/RetrieveRequestXmlSample", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        public string RetrieveRequestXmlSample() {
            object[] results = this.Invoke("RetrieveRequestXmlSample", new object[0]);
            return ((string)(results[0]));
        }
        
        public System.IAsyncResult BeginRetrieveRequestXmlSample(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("RetrieveRequestXmlSample", new object[0], callback, asyncState);
        }
        
        public string EndRetrieveRequestXmlSample(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        public void RetrieveRequestXmlSampleAsync() {
            this.RetrieveRequestXmlSampleAsync(null);
        }
        
        public void RetrieveRequestXmlSampleAsync(object userState) {
            if ((this.RetrieveRequestXmlSampleOperationCompleted == null)) {
                this.RetrieveRequestXmlSampleOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRetrieveRequestXmlSampleCompleted);
            }
            this.InvokeAsync("RetrieveRequestXmlSample", new object[0], this.RetrieveRequestXmlSampleOperationCompleted, userState);
        }
        
        private void OnRetrieveRequestXmlSampleCompleted(object arg) {
            if ((this.RetrieveRequestXmlSampleCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RetrieveRequestXmlSampleCompleted(this, new RetrieveRequestXmlSampleCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks>
///Retrieve the Response XML Schema currently used for constructing Response Xml documents
///</remarks>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/RetrieveResponseXmlSchema", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        public string RetrieveResponseXmlSchema() {
            object[] results = this.Invoke("RetrieveResponseXmlSchema", new object[0]);
            return ((string)(results[0]));
        }
        
        public System.IAsyncResult BeginRetrieveResponseXmlSchema(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("RetrieveResponseXmlSchema", new object[0], callback, asyncState);
        }
        
        public string EndRetrieveResponseXmlSchema(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        public void RetrieveResponseXmlSchemaAsync() {
            this.RetrieveResponseXmlSchemaAsync(null);
        }
        
        public void RetrieveResponseXmlSchemaAsync(object userState) {
            if ((this.RetrieveResponseXmlSchemaOperationCompleted == null)) {
                this.RetrieveResponseXmlSchemaOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRetrieveResponseXmlSchemaCompleted);
            }
            this.InvokeAsync("RetrieveResponseXmlSchema", new object[0], this.RetrieveResponseXmlSchemaOperationCompleted, userState);
        }
        
        private void OnRetrieveResponseXmlSchemaCompleted(object arg) {
            if ((this.RetrieveResponseXmlSchemaCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RetrieveResponseXmlSchemaCompleted(this, new RetrieveResponseXmlSchemaCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks>
///Retrieve the Responsedetailed XML Schema currently used for constructing ResponseDetailed Xml documents
///</remarks>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/RetrieveResponseDetailedXmlSchema", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        public string RetrieveResponseDetailedXmlSchema() {
            object[] results = this.Invoke("RetrieveResponseDetailedXmlSchema", new object[0]);
            return ((string)(results[0]));
        }
        
        public System.IAsyncResult BeginRetrieveResponseDetailedXmlSchema(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("RetrieveResponseDetailedXmlSchema", new object[0], callback, asyncState);
        }
        
        public string EndRetrieveResponseDetailedXmlSchema(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        public void RetrieveResponseDetailedXmlSchemaAsync() {
            this.RetrieveResponseDetailedXmlSchemaAsync(null);
        }
        
        public void RetrieveResponseDetailedXmlSchemaAsync(object userState) {
            if ((this.RetrieveResponseDetailedXmlSchemaOperationCompleted == null)) {
                this.RetrieveResponseDetailedXmlSchemaOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRetrieveResponseDetailedXmlSchemaCompleted);
            }
            this.InvokeAsync("RetrieveResponseDetailedXmlSchema", new object[0], this.RetrieveResponseDetailedXmlSchemaOperationCompleted, userState);
        }
        
        private void OnRetrieveResponseDetailedXmlSchemaCompleted(object arg) {
            if ((this.RetrieveResponseDetailedXmlSchemaCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RetrieveResponseDetailedXmlSchemaCompleted(this, new RetrieveResponseDetailedXmlSchemaCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks>
///Calculate similarity between two sentences.
///</remarks>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CalculateSimilarity", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        public string CalculateSimilarity(string text1, string text2) {
            object[] results = this.Invoke("CalculateSimilarity", new object[] {
                        text1,
                        text2});
            return ((string)(results[0]));
        }
        
        public System.IAsyncResult BeginCalculateSimilarity(string text1, string text2, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("CalculateSimilarity", new object[] {
                        text1,
                        text2}, callback, asyncState);
        }
        
        public string EndCalculateSimilarity(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        public void CalculateSimilarityAsync(string text1, string text2) {
            this.CalculateSimilarityAsync(text1, text2, null);
        }
        
        public void CalculateSimilarityAsync(string text1, string text2, object userState) {
            if ((this.CalculateSimilarityOperationCompleted == null)) {
                this.CalculateSimilarityOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCalculateSimilarityCompleted);
            }
            this.InvokeAsync("CalculateSimilarity", new object[] {
                        text1,
                        text2}, this.CalculateSimilarityOperationCompleted, userState);
        }
        
        private void OnCalculateSimilarityCompleted(object arg) {
            if ((this.CalculateSimilarityCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CalculateSimilarityCompleted(this, new CalculateSimilarityCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks>
///Substitute domain terms from a given text to generate creativity prompts.
///</remarks>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ConvertToNewDomain", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        public string ConvertToNewDomain(string text, string targetDomain, string sourceDomain) {
            object[] results = this.Invoke("ConvertToNewDomain", new object[] {
                        text,
                        targetDomain,
                        sourceDomain});
            return ((string)(results[0]));
        }
        
        public System.IAsyncResult BeginConvertToNewDomain(string text, string targetDomain, string sourceDomain, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ConvertToNewDomain", new object[] {
                        text,
                        targetDomain,
                        sourceDomain}, callback, asyncState);
        }
        
        public string EndConvertToNewDomain(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        public void ConvertToNewDomainAsync(string text, string targetDomain, string sourceDomain) {
            this.ConvertToNewDomainAsync(text, targetDomain, sourceDomain, null);
        }
        
        public void ConvertToNewDomainAsync(string text, string targetDomain, string sourceDomain, object userState) {
            if ((this.ConvertToNewDomainOperationCompleted == null)) {
                this.ConvertToNewDomainOperationCompleted = new System.Threading.SendOrPostCallback(this.OnConvertToNewDomainCompleted);
            }
            this.InvokeAsync("ConvertToNewDomain", new object[] {
                        text,
                        targetDomain,
                        sourceDomain}, this.ConvertToNewDomainOperationCompleted, userState);
        }
        
        private void OnConvertToNewDomainCompleted(object arg) {
            if ((this.ConvertToNewDomainCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ConvertToNewDomainCompleted(this, new ConvertToNewDomainCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks>
///Generate creativity prompts from a given text
///</remarks>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GenerateCreativityPrompts", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        public string GenerateCreativityPrompts(string text) {
            object[] results = this.Invoke("GenerateCreativityPrompts", new object[] {
                        text});
            return ((string)(results[0]));
        }
        
        public System.IAsyncResult BeginGenerateCreativityPrompts(string text, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GenerateCreativityPrompts", new object[] {
                        text}, callback, asyncState);
        }
        
        public string EndGenerateCreativityPrompts(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        public void GenerateCreativityPromptsAsync(string text) {
            this.GenerateCreativityPromptsAsync(text, null);
        }
        
        public void GenerateCreativityPromptsAsync(string text, object userState) {
            if ((this.GenerateCreativityPromptsOperationCompleted == null)) {
                this.GenerateCreativityPromptsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGenerateCreativityPromptsCompleted);
            }
            this.InvokeAsync("GenerateCreativityPrompts", new object[] {
                        text}, this.GenerateCreativityPromptsOperationCompleted, userState);
        }
        
        private void OnGenerateCreativityPromptsCompleted(object arg) {
            if ((this.GenerateCreativityPromptsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GenerateCreativityPromptsCompleted(this, new GenerateCreativityPromptsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks>
///Extract text from a document's URL and generate predicates.
///</remarks>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GeneratePredicatesFromDocument", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        public void GeneratePredicatesFromDocument(string documentUri, int domainID) {
            this.Invoke("GeneratePredicatesFromDocument", new object[] {
                        documentUri,
                        domainID});
        }
        
        public System.IAsyncResult BeginGeneratePredicatesFromDocument(string documentUri, int domainID, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GeneratePredicatesFromDocument", new object[] {
                        documentUri,
                        domainID}, callback, asyncState);
        }
        
        public void EndGeneratePredicatesFromDocument(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        public void GeneratePredicatesFromDocumentAsync(string documentUri, int domainID) {
            this.GeneratePredicatesFromDocumentAsync(documentUri, domainID, null);
        }
        
        public void GeneratePredicatesFromDocumentAsync(string documentUri, int domainID, object userState) {
            if ((this.GeneratePredicatesFromDocumentOperationCompleted == null)) {
                this.GeneratePredicatesFromDocumentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGeneratePredicatesFromDocumentCompleted);
            }
            this.InvokeAsync("GeneratePredicatesFromDocument", new object[] {
                        documentUri,
                        domainID}, this.GeneratePredicatesFromDocumentOperationCompleted, userState);
        }
        
        private void OnGeneratePredicatesFromDocumentCompleted(object arg) {
            if ((this.GeneratePredicatesFromDocumentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GeneratePredicatesFromDocumentCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks>
///Generate predicates from a given text.
///</remarks>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GeneratePredicates", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        public void GeneratePredicates(string name, string assignedID, string author, int domainID, string problem, string solution, string keywords) {
            this.Invoke("GeneratePredicates", new object[] {
                        name,
                        assignedID,
                        author,
                        domainID,
                        problem,
                        solution,
                        keywords});
        }
        
        public System.IAsyncResult BeginGeneratePredicates(string name, string assignedID, string author, int domainID, string problem, string solution, string keywords, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GeneratePredicates", new object[] {
                        name,
                        assignedID,
                        author,
                        domainID,
                        problem,
                        solution,
                        keywords}, callback, asyncState);
        }
        
        public void EndGeneratePredicates(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        public void GeneratePredicatesAsync(string name, string assignedID, string author, int domainID, string problem, string solution, string keywords) {
            this.GeneratePredicatesAsync(name, assignedID, author, domainID, problem, solution, keywords, null);
        }
        
        public void GeneratePredicatesAsync(string name, string assignedID, string author, int domainID, string problem, string solution, string keywords, object userState) {
            if ((this.GeneratePredicatesOperationCompleted == null)) {
                this.GeneratePredicatesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGeneratePredicatesCompleted);
            }
            this.InvokeAsync("GeneratePredicates", new object[] {
                        name,
                        assignedID,
                        author,
                        domainID,
                        problem,
                        solution,
                        keywords}, this.GeneratePredicatesOperationCompleted, userState);
        }
        
        private void OnGeneratePredicatesCompleted(object arg) {
            if ((this.GeneratePredicatesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GeneratePredicatesCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks>
///Retrieve all sources from DB
///</remarks>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/RetrieveAllSources", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        public string RetrieveAllSources() {
            object[] results = this.Invoke("RetrieveAllSources", new object[0]);
            return ((string)(results[0]));
        }
        
        public System.IAsyncResult BeginRetrieveAllSources(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("RetrieveAllSources", new object[0], callback, asyncState);
        }
        
        public string EndRetrieveAllSources(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        public void RetrieveAllSourcesAsync() {
            this.RetrieveAllSourcesAsync(null);
        }
        
        public void RetrieveAllSourcesAsync(object userState) {
            if ((this.RetrieveAllSourcesOperationCompleted == null)) {
                this.RetrieveAllSourcesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRetrieveAllSourcesCompleted);
            }
            this.InvokeAsync("RetrieveAllSources", new object[0], this.RetrieveAllSourcesOperationCompleted, userState);
        }
        
        private void OnRetrieveAllSourcesCompleted(object arg) {
            if ((this.RetrieveAllSourcesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RetrieveAllSourcesCompleted(this, new RetrieveAllSourcesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks>
///Perform a search using AnTiQue
///</remarks>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/PerformAntique", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        public string PerformAntique(string antiqueRequestXml) {
            object[] results = this.Invoke("PerformAntique", new object[] {
                        antiqueRequestXml});
            return ((string)(results[0]));
        }
        
        public System.IAsyncResult BeginPerformAntique(string antiqueRequestXml, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("PerformAntique", new object[] {
                        antiqueRequestXml}, callback, asyncState);
        }
        
        public string EndPerformAntique(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        public void PerformAntiqueAsync(string antiqueRequestXml) {
            this.PerformAntiqueAsync(antiqueRequestXml, null);
        }
        
        public void PerformAntiqueAsync(string antiqueRequestXml, object userState) {
            if ((this.PerformAntiqueOperationCompleted == null)) {
                this.PerformAntiqueOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPerformAntiqueCompleted);
            }
            this.InvokeAsync("PerformAntique", new object[] {
                        antiqueRequestXml}, this.PerformAntiqueOperationCompleted, userState);
        }
        
        private void OnPerformAntiqueCompleted(object arg) {
            if ((this.PerformAntiqueCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PerformAntiqueCompleted(this, new PerformAntiqueCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks>
///Perform a search using AnTiQue based on a example request
///</remarks>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/PerformAntiqueSample", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        public string PerformAntiqueSample() {
            object[] results = this.Invoke("PerformAntiqueSample", new object[0]);
            return ((string)(results[0]));
        }
        
        public System.IAsyncResult BeginPerformAntiqueSample(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("PerformAntiqueSample", new object[0], callback, asyncState);
        }
        
        public string EndPerformAntiqueSample(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        public void PerformAntiqueSampleAsync() {
            this.PerformAntiqueSampleAsync(null);
        }
        
        public void PerformAntiqueSampleAsync(object userState) {
            if ((this.PerformAntiqueSampleOperationCompleted == null)) {
                this.PerformAntiqueSampleOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPerformAntiqueSampleCompleted);
            }
            this.InvokeAsync("PerformAntiqueSample", new object[0], this.PerformAntiqueSampleOperationCompleted, userState);
        }
        
        private void OnPerformAntiqueSampleCompleted(object arg) {
            if ((this.PerformAntiqueSampleCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PerformAntiqueSampleCompleted(this, new PerformAntiqueSampleCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
    }
    
    public partial class NLParserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal NLParserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    public delegate void NLParserCompletedEventHandler(object sender, NLParserCompletedEventArgs args);
    
    public partial class ValidateRequestXmlCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ValidateRequestXmlCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    public delegate void ValidateRequestXmlCompletedEventHandler(object sender, ValidateRequestXmlCompletedEventArgs args);
    
    public partial class ValidateRequestXmlUriCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ValidateRequestXmlUriCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    public delegate void ValidateRequestXmlUriCompletedEventHandler(object sender, ValidateRequestXmlUriCompletedEventArgs args);
    
    public partial class ValidateXmlCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ValidateXmlCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    public delegate void ValidateXmlCompletedEventHandler(object sender, ValidateXmlCompletedEventArgs args);
    
    public partial class ValidateXmlUriCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ValidateXmlUriCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    public delegate void ValidateXmlUriCompletedEventHandler(object sender, ValidateXmlUriCompletedEventArgs args);
    
    public partial class RetrieveRequestXmlSchemaCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RetrieveRequestXmlSchemaCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    public delegate void RetrieveRequestXmlSchemaCompletedEventHandler(object sender, RetrieveRequestXmlSchemaCompletedEventArgs args);
    
    public partial class RetrieveRequestXmlSampleCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RetrieveRequestXmlSampleCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    public delegate void RetrieveRequestXmlSampleCompletedEventHandler(object sender, RetrieveRequestXmlSampleCompletedEventArgs args);
    
    public partial class RetrieveResponseXmlSchemaCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RetrieveResponseXmlSchemaCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    public delegate void RetrieveResponseXmlSchemaCompletedEventHandler(object sender, RetrieveResponseXmlSchemaCompletedEventArgs args);
    
    public partial class RetrieveResponseDetailedXmlSchemaCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RetrieveResponseDetailedXmlSchemaCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    public delegate void RetrieveResponseDetailedXmlSchemaCompletedEventHandler(object sender, RetrieveResponseDetailedXmlSchemaCompletedEventArgs args);
    
    public partial class CalculateSimilarityCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CalculateSimilarityCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    public delegate void CalculateSimilarityCompletedEventHandler(object sender, CalculateSimilarityCompletedEventArgs args);
    
    public partial class ConvertToNewDomainCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ConvertToNewDomainCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    public delegate void ConvertToNewDomainCompletedEventHandler(object sender, ConvertToNewDomainCompletedEventArgs args);
    
    public partial class GenerateCreativityPromptsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GenerateCreativityPromptsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    public delegate void GenerateCreativityPromptsCompletedEventHandler(object sender, GenerateCreativityPromptsCompletedEventArgs args);
    
    public delegate void GeneratePredicatesFromDocumentCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs args);
    
    public delegate void GeneratePredicatesCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs args);
    
    public partial class RetrieveAllSourcesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RetrieveAllSourcesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    public delegate void RetrieveAllSourcesCompletedEventHandler(object sender, RetrieveAllSourcesCompletedEventArgs args);
    
    public partial class PerformAntiqueCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PerformAntiqueCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    public delegate void PerformAntiqueCompletedEventHandler(object sender, PerformAntiqueCompletedEventArgs args);
    
    public partial class PerformAntiqueSampleCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PerformAntiqueSampleCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    public delegate void PerformAntiqueSampleCompletedEventHandler(object sender, PerformAntiqueSampleCompletedEventArgs args);
}
